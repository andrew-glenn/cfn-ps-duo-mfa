AWSTemplateFormatVersion: 2010-09-09
Description: "Configures Duo RADIUS ECS services using Fargate for use in Directory Service MFA (can be used for AWS SSO, WorkSpaces, and other SAML service providers) (qs-1s5bmdj30)\n"
Metadata:
  QuickStartDocumentation:
    EntrypointName: Parameters for deploying into an existing VPC
    Order: '2'
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Duo account settings
        Parameters:
          - DuoIntegrationKey
          - DuoSecretKey
          - DuoApiHostName
      - Label:
          default: RADIUS proxy configuration settings
        Parameters:
          - DirectoryServiceId
          - DirectoryServiceType
          - RadiusProxyServerCount
          - RadiusPortNumber
          - DuoFailMode
          - DuoMaxCapacity
          - NotificationEmail
      - Label:
          default: Directory Sync configuration settings
        Parameters:
          - AdSync
          - DirectoryIntegrationKey
          - DirectorySecretKey
          - adReadOnlyUser
          - adReadOnlyPassword
      - Label:
          default: Duo Authentication Proxy ECR configuration
        Parameters:
          - EcrImageRetention
          - EcrRepoName
      - Label:
          default: CodeCommit configuration
        Parameters:
          - CodeCommitRepoName
          - CodeCommitBranchName
      - Label:
          default: CodePipeline configuration
        Parameters:
          - EcrCronExpression
      - Label:
          default: AWS KMS configuration
        Parameters:
          - AdminArn
      - Label:
          default: Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
    ParameterLabels:
      AdminArn:
        default: AWS KMS administrator role ARN
      EcrRepoName:
        default: ECR repo name
      EcrImageRetention:
        default: ECR retention period
      CodeCommitRepoName:
        default: CodeCommit repo name
      CodeCommitBranchName:
        default: CodeCommit branch name
      EcrCronExpression:
        default: ECR rebuild cron expression
      NotificationEmail:
        default: Duo administrator email
      DuoMaxCapacity:
        default: Duo maximum tasks
      AdSync:
        default: Sync Active Directory
      adReadOnlyUser:
        default: Active Directory read-only user
      adReadOnlyPassword:
        default: Active Directory read-only password
      DirectoryIntegrationKey:
        default: Duo directory integration key
      DirectorySecretKey:
        default: Duo directory secret key
      DuoIntegrationKey:
        default: Duo integration key
      DuoSecretKey:
        default: Duo secret key
      DuoApiHostName:
        default: Duo API hostname
      DirectoryServiceId:
        default: Directory Service ID
      DirectoryServiceType:
        default: Directory Service Type
      RadiusProxyServerCount:
        default: RADIUS proxy server count
      RadiusPortNumber:
        default: RADIUS port number
      DuoFailMode:
        default: Duo fail mode
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3BucketRegion:
        default: Quick Start S3 bucket Region
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
Parameters:
  DirectoryServiceType:
    Type: String
    Description: AD Connector or Managed AD type of directory
    Default: Managed AD
    AllowedValues:
      - AD Connector
      - Managed AD
  AdminArn:
    Type: String
    Description: IAM Amazon Resource Name that has administrator rights to the AWS KMS key. If you keep this box blank, KMS key policy will not have an administrator role to administer it.
    Default: ''
  EcrRepoName:
    Type: String
    Description: Name of the Duo Authentication proxy ECR repo.
    Default: duo-authproxy
    AllowedPattern: (?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*
    MinLength: 2
    MaxLength: 256
  EcrImageRetention:
    Type: Number
    Description: Number of days to retain the ECR image.
    ConstraintDescription: Must be in the range [30-600].
    Default: 30
    MinValue: 30
    MaxValue: 600
  CodeCommitRepoName:
    Type: String
    Description: Name of the CodeCommit repo that which will manage all the code base.
    Default: duo-authproxy
    AllowedPattern: ^[0-9a-zA-Z-/]*$
  CodeCommitBranchName:
    Type: String
    Description: Name of the CodeCommit branch where all the code base is located. This branch starts actions in CodePipeline.
    Default: ecr
    AllowedPattern: ^[0-9a-zA-Z-/]*$
  EcrCronExpression:
    Type: String
    Description: Cron expression trigger. By default, it's set at 0000 UTC every Saturday. See https://docs.aws.amazon.com/eventbridge/latest/userguide/scheduled-events.html.
    Default: 0 0 ? * SAT *
  NotificationEmail:
    Type: String
    Description: Email address of Duo administrators to notify when the pipeline fails or when an update to the directory fails.
    AllowedPattern: ^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$
    ConstraintDescription: Provide a valid email address.
  AdSync:
    Type: String
    Description: If Active Directory synchronization is not required, choose "no."
    Default: 'yes'
    AllowedValues:
      - 'yes'
      - 'no'
  adReadOnlyUser:
    Type: String
    Description: "Name of Active Directory user with read-only access to the directory for Duo's Directory Sync configuration.\n"
    Default: ''
  adReadOnlyPassword:
    Type: String
    NoEcho: true
    Description: "Password for Active Directory user with read-only access to the directory for Duo's Directory Sync configuration.\n"
    Default: ''
  DirectoryIntegrationKey:
    Type: String
    Description: "Integration key retrieved from Duo's Directory Sync configuration.\n"
    Default: ''
  DirectorySecretKey:
    Type: String
    NoEcho: true
    Description: "Secret key retrieved from Duo's Directory Sync configuration.\n"
    Default: ''
  DuoIntegrationKey:
    Type: String
    Description: "Integration key retrieved from the Duo RADIUS application configuration.\n"
  DuoSecretKey:
    Type: String
    NoEcho: true
    Description: "Secret key retrieved from the Duo RADIUS application configuration.\n"
  DuoApiHostName:
    Type: String
    Description: "API hostname retrieved from the Duo RADIUS application configuration.\n"
  DirectoryServiceId:
    Type: String
    Description: "ID of existing Directory Service (d-xxxxxxxxxx).\n"
    AllowedPattern: ^d\-[a-zA-Z0-9]{10,}$
    ConstraintDescription: "Directory Service ID must match the pattern d-0123456789.\n"
  RadiusProxyServerCount:
    Type: Number
    Default: 2
    AllowedValues:
      - 1
      - 2
      - 3
      - 4
    Description: "Number of RADIUS proxy Fargate servers to create.\n"
  RadiusPortNumber:
    Type: Number
    Description: "Port on which to listen for incoming RADIUS access requests.\n"
    Default: 1812
    ConstraintDescription: Must be in the range [1150-65535].
    MinValue: 1150
    MaxValue: 65535
  DuoFailMode:
    Type: String
    Description: "After primary authentication succeeds, safe mode allows authentication attempts if the Duo service cannot be contacted. Secure mode rejects authentication attempts if the Duo service cannot\
      \ be contacted.\n"
    AllowedValues:
      - safe
      - secure
    Default: safe
  DuoMaxCapacity:
    Type: String
    Description: "Maximum number of tasks that can be launched by ECS Application Auto Scaling.\n"
    Default: 4
    AllowedValues:
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: The Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-ia
    Description: Name of the S3 bucket for your copy of the Quick Start assets. Keep the default name unless you are customizing the template. Changing the name updates code references to point to a new
      Quick Start location. This name can include numbers, lowercase letters, uppercase letters, and hyphens, but do not start or end with a hyphen (-). See https://aws-quickstart.github.io/option1.html.
    Type: String
  QSS3BucketRegion:
    Default: us-east-1
    Description: AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. Keep the default Region unless you are customizing the template. Changing this Region updates code references to point
      to a new Quick Start location. When using your own bucket, specify the Region. See https://aws-quickstart.github.io/option1.html.
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: The Quick Start S3 key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slashes (/). The prefix should end with a forward slash (/).
    Default: cfn-ps-duo-mfa/
    Description: S3 key prefix that is used to simulate a directory for your copy of the Quick Start assets. Keep the default prefix unless you are customizing the template. Changing this prefix updates
      code references to point to a new Quick Start location. This prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slashes (/). End with a forward slash. See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html
      and https://aws-quickstart.github.io/option1.html.
    Type: String
Conditions:
  NoKmsAdmin:
    Fn::Equals:
      - Ref: AdminArn
      - ''
  ManagedAdEgressRule:
    Fn::Equals:
      - Ref: DirectoryServiceType
      - Managed AD
Resources:
  GetDirectoryServiceMfaSettingsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: GetDirectoryServiceMfaSettingsRole-${DirectoryServiceId}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: DuoKmsIamPolicy
      Policies:
        - PolicyName: DescribeDirectoryServices
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ds:DescribeDirectories
                Resource: '*'
  GetDirectoryServiceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Look up Directory Service
      Handler: index.lambda_handler
      KmsKeyArn:
        Fn::GetAtt:
          - DuoKmsKey
          - Arn
      Role:
        Fn::GetAtt:
          - GetDirectoryServiceMfaSettingsRole
          - Arn
      Runtime: python3.7
      Timeout: 60
      Tags:
        - Key: duo:DirectoryServiceId
          Value:
            Ref: DirectoryServiceId
      Code:
        ZipFile: "import boto3\nimport json\nimport cfnresponse\ndef lambda_handler(event, context):\n  print (json.dumps(event))\n  if 'RequestType' in event and 'Delete' in event['RequestType']:\n   \
          \ cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')\n  elif (event['RequestType'] == 'Create') or (event['RequestType'] == 'Update'):\n    print(event['RequestType'] + ' event proceeding\
          \ to get ips')\n    try:\n      directory_id = event['ResourceProperties']['directory_id']\n      directories = boto3.client('ds').describe_directories(DirectoryIds = [directory_id])['DirectoryDescriptions']\n\
          \      directory = directories[0]\n      network = ''\n      if directory['Type'] == 'ADConnector': \n        network = 'ConnectSettings'\n        ips = directory['ConnectSettings']['ConnectIps']\n\
          \      elif directory['Type'] == 'MicrosoftAD': \n        network = 'VpcSettings'\n        ips = directory['DnsIpAddrs']\n    \n      responseData = {}\n      responseData['VpcId'] = directory[network]['VpcId']\n\
          \      responseData['SecurityGroupId'] = directory[network]['SecurityGroupId']\n      responseData['SubnetId1'] = directory[network]['SubnetIds'][0]\n      responseData['SubnetId2'] = directory[network]['SubnetIds'][1]\n\
          \      responseData['DsIp1'] = ips[0]\n      responseData['DsIp2'] = ips[1]\n      # print(reponseData)\n      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, '')\n    except\
          \ Exception as e:\n      print(e) \n      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, '')\n"
  GetDirectoryServiceDetails:
    Type: Custom::GetDirectoryService
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - GetDirectoryServiceFunction
          - Arn
      directory_id:
        Ref: DirectoryServiceId
      toggler: '2'
  DuoConfigurationSettingsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Sub: DuoConfigurationSettings-${DirectoryServiceId}
      Description: Duo configuration settings
      KmsKeyId:
        Fn::GetAtt:
          - DuoKmsKey
          - Arn
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Sub: "{\n  \"DuoSecretKey\":\"${DuoSecretKey}\",\n  \"DuoIntegrationKey\":\"${DuoIntegrationKey}\",\n  \"DuoApiHostName\":\"${DuoApiHostName}\",\n  \"DirectoryIntegrationKey\":\"${DirectoryIntegrationKey}\"\
            ,\n  \"DirectorySecretKey\":\"${DirectorySecretKey}\",\n  \"adReadOnlyUser\":\"${adReadOnlyUser}\",\n  \"adReadOnlyPassword\":\"${adReadOnlyPassword}\"\n}\n"
        GenerateStringKey: RadiusSharedSecret
        PasswordLength: 25
        ExcludeCharacters: '"=,'
      Tags:
        - Key: duo:DirectoryServiceId
          Value:
            Ref: DirectoryServiceId
  DuoConfigurationSettingsSecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: DuoConfigurationSettingsSecretRotationLambdaInvokePermission
    Properties:
      SecretId:
        Ref: DuoConfigurationSettingsSecret
      RotationLambdaARN:
        Fn::GetAtt:
          - RotateRadiusSharedSecretFunction
          - Arn
      RotationRules:
        AutomaticallyAfterDays: 7
  DuoConfigurationSettingsSecretRotationLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: RotateRadiusSharedSecretFunction
      Action: lambda:InvokeFunction
      Principal: secretsmanager.amazonaws.com
  RadiusProxyCloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: RadiusProxyLogs-${DirectoryServiceId}/authproxy.log
      RetentionInDays: 30
  DuoCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
  DuoTaskDefinition:
    DependsOn: DuoSnsCustomResource
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: 2GB
      Family:
        Fn::Sub: ${AWS::StackName}
      ExecutionRoleArn:
        Fn::GetAtt:
          - DuoTaskRoleArn
          - Arn
      TaskRoleArn:
        Fn::GetAtt:
          - DuoTaskRoleArn
          - Arn
      ContainerDefinitions:
        - Name: DuoAuthProxy
          Image:
            Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepoName}
          PortMappings:
            - ContainerPort:
                Ref: RadiusPortNumber
              HostPort:
                Ref: RadiusPortNumber
              Protocol: udp
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Environment:
            - Name: DIRECTORY_IP1
              Value:
                Fn::GetAtt:
                  - GetDirectoryServiceDetails
                  - DsIp1
            - Name: DIRECTORY_IP2
              Value:
                Fn::GetAtt:
                  - GetDirectoryServiceDetails
                  - DsIp2
            - Name: DUO_FAIL_MODE
              Value:
                Ref: DuoFailMode
            - Name: RADIUS_PORT_NUMBER
              Value:
                Ref: RadiusPortNumber
            - Name: AD_SYNC
              Value:
                Ref: AdSync
          Secrets:
            - Name: DuoSecret
              ValueFrom:
                Ref: DuoConfigurationSettingsSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region:
                Ref: AWS::Region
              awslogs-group:
                Ref: RadiusProxyCloudWatchLogsGroup
              awslogs-stream-prefix: ecs
  DuoTaskRoleArn:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - Ref: DuoKmsIamPolicy
      Policies:
        - PolicyName: GetSecrets
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  Ref: DuoConfigurationSettingsSecret
  DuoService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: DuoCluster
      DeploymentConfiguration:
        MaximumPercent: 400
        MinimumHealthyPercent: 100
      DesiredCount:
        Ref: RadiusProxyServerCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Ref: DuoServiceSg
          Subnets:
            - Fn::GetAtt:
                - GetDirectoryServiceDetails
                - SubnetId1
            - Fn::GetAtt:
                - GetDirectoryServiceDetails
                - SubnetId2
      TaskDefinition:
        Ref: DuoTaskDefinition
  DuoServiceSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Duo RADIUS proxies
      VpcId:
        Fn::GetAtt:
          - GetDirectoryServiceDetails
          - VpcId
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort:
            Ref: RadiusPortNumber
          ToPort:
            Ref: RadiusPortNumber
          SourceSecurityGroupId:
            Fn::GetAtt:
              - GetDirectoryServiceDetails
              - SecurityGroupId
          Description: Allows UDP from Directory Service domain controllers
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
  DirectoryEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: ManagedAdEgressRule
    Properties:
      IpProtocol: udp
      FromPort:
        Ref: RadiusPortNumber
      ToPort:
        Ref: RadiusPortNumber
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - DuoServiceSg
          - GroupId
      GroupId:
        Fn::GetAtt:
          - GetDirectoryServiceDetails
          - SecurityGroupId
  DuoServiceEvents:
    Type: AWS::Events::Rule
    Properties:
      Description: EventRule
      EventPattern:
        source:
          - aws.ecs
        detail-type:
          - ECS Service Action
        detail:
          clusterArn:
            - Fn::GetAtt:
                - DuoCluster
                - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - ProcessDuoServiceFunction
              - Arn
          Id: TargetFunctionV1
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: ProcessDuoServiceFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - DuoServiceEvents
          - Arn
  DuoServiceIps:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: default
  ProcessDuoServiceEventsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: DuoKmsIamPolicy
      Policies:
        - PolicyName: DuoEcsServiceDetails
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter*
                Resource:
                  Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DuoServiceIps}
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
            - EIAMPolicyActionWildcard
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
  ProcessDuoServiceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Rotates RADIUS shared secret and updates running instances and directory\n"
      Handler: index.lambda_handler
      KmsKeyArn:
        Fn::GetAtt:
          - DuoKmsKey
          - Arn
      Role:
        Fn::GetAtt:
          - ProcessDuoServiceEventsRole
          - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DuoService:
            Ref: DuoService
          DuoCluster:
            Fn::GetAtt:
              - DuoCluster
              - Arn
          DuoSsm:
            Ref: DuoServiceIps
      Tags:
        - Key: duo:DirectoryServiceId
          Value:
            Ref: DirectoryServiceId
      Code:
        ZipFile: "import boto3\nimport os\nimport json\n\necs = boto3.client('ecs')\n ssm = boto3.client('ssm')\n\nos_srv = os.environ['DuoService']\nos_cluster = os.environ['DuoCluster']\n\ndef lambda_handler(event,\
          \ context):\n  duo_cluster = event['detail']['clusterArn']\n  duo_service = event['resources'][0]\n  old_ips = ssm.get_parameter(Name=os.environ['DuoSsm'])['Parameter']['Value']\n  if os_srv ==\
          \ duo_service:\n    if os_cluster == duo_cluster:\n      print('Cluster and service names match')\n      r = ecs.list_tasks(cluster=duo_cluster, serviceName=duo_service, desiredStatus='RUNNING',\
          \ launchType='FARGATE')\n      s = ecs.describe_tasks(cluster=duo_cluster,tasks=r['taskArns'])\n\n      ip=[]\n      for task in s['tasks']:\n        for con in task['containers']:\n         \
          \ for net in con['networkInterfaces']:\n            ip.append(net['privateIpv4Address'])\n            print('Task IP: '+ net['privateIpv4Address'])\n      ip_string = ','.join([str(elem) for elem\
          \ in ip])\n      if old_ips == ip_string:\n        print('There has been no change in the IP address. No action will be taken')\n      else: \n        print('Fargate task IP addresses have changed.')\n\
          \        ssm.put_parameter(Name=os.environ['DuoSsm'],Value=ip_string,Type='String',Overwrite=True)\n\n    else:\n      print('Cluster name does not match. Given: ' + os_cluster + ' observed: '\
          \ + duo_cluster)\n  else: \n    print('Service names do not match. Given: ' + os_srv + ' observed: ' + duo_service)\n"
  RadiusSharedSecretRotationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: DuoKmsIamPolicy
      Policies:
        - PolicyName: RotateDuoConfigurationSettingsSecret
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                Resource:
                  Fn::Sub:
                    - arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:service/${DuoCluster}/${DuoServiceName}
                    - DuoServiceName:
                        Fn::GetAtt:
                          - DuoService
                          - Name
              - Effect: Allow
                Action:
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:UpdateSecretVersionStage
                Resource:
                  Ref: DuoConfigurationSettingsSecret
              - Effect: Allow
                Action:
                  - secretsmanager:GetRandomPassword
                Resource: '*'
  RotateRadiusSharedSecretFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Rotates RADIUS shared secret and updates running instances and directory\n"
      Handler: index.lambda_handler
      KmsKeyArn:
        Fn::GetAtt:
          - DuoKmsKey
          - Arn
      Role:
        Fn::GetAtt:
          - RadiusSharedSecretRotationRole
          - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          PasswordLength: 25
          ExcludeCharacters: '"=,'
          RunDocumentTagName: tag:duo:DirectoryServiceId
          RunDocumentTagValue:
            Ref: DirectoryServiceId
          DuoService:
            Fn::GetAtt:
              - DuoService
              - Name
          DuoCluster:
            Ref: DuoCluster
      Tags:
        - Key: duo:DirectoryServiceId
          Value:
            Ref: DirectoryServiceId
      Code:
        ZipFile: "import boto3\nimport os\nimport json\nimport time\n\nsecretsmanager_client = boto3.client('secretsmanager')\nssm_client = boto3.client('ssm')\nlambda_client = boto3.client('lambda')\n\
          ecs = boto3.client('ecs')\nsrv = os.environ['DuoService']\n duo_cluster = os.environ['DuoCluster']\n# func = os.environ['func_arn']\n def lambda_handler(event, context):\n    arn = event['SecretId']\n\
          \    token = event['ClientRequestToken']\n    step = event['Step']\n\n    if step == \"createSecret\":\n        create_secret(secretsmanager_client, arn, token)\n\n    elif step == \"finishSecret\"\
          :\n        finish_secret(secretsmanager_client, arn, token)\n        \n    ecs.update_service(cluster=duo_cluster,service=srv, forceNewDeployment=True)\n\ndef create_secret(secretsmanager_client,\
          \ arn, token):\n    # Get the secret\n    secret = json.loads(secretsmanager_client.get_secret_value(SecretId=arn, VersionStage=\"AWSCURRENT\")['SecretString'])\n\n    # Generate a random password\n\
          \    r = secretsmanager_client.get_random_password(PasswordLength=int(os.environ['PasswordLength']),ExcludeCharacters=os.environ['ExcludeCharacters'])\n    secret['RadiusSharedSecret'] = r['RandomPassword']\n\
          \n    # Put the secret\n    secretsmanager_client.put_secret_value(SecretId=arn, ClientRequestToken=token, SecretString=json.dumps(secret), VersionStages=['AWSPENDING'])\n    print(\"createSecret:\
          \ Successfully put secret for ARN %s and version %s.\" % (arn, token))\n\n\ndef finish_secret(secretsmanager_client, arn, token):\n    # First describe the secret to get the current version\n\
          \    metadata = secretsmanager_client.describe_secret(SecretId=arn)\n    current_version = None\n    for version in metadata[\"VersionIdsToStages\"]:\n        if \"AWSCURRENT\" in metadata[\"\
          VersionIdsToStages\"][version]:\n            if version == token:\n                print(\"finishSecret: Version %s already marked as AWSCURRENT for %s\" % (version, arn))\n                return\n\
          \            current_version = version\n            break\n\n    # Finalize by staging the secret version current\n    secretsmanager_client.update_secret_version_stage(SecretId=arn, VersionStage=\"\
          AWSCURRENT\", MoveToVersionId=token, RemoveFromVersionId=current_version)\n    print(\"finishSecret: Successfully set AWSCURRENT stage to version %s for secret %s.\" % (version, arn))\n"
  UpdateDirectoryServiceEvent:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.ssm
        detail-type:
          - Parameter Store Change
        detail:
          name:
            - Ref: DuoServiceIps
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - UpdateDirectoryServiceMfaSettings
              - Arn
          Id: TargetFunctionV1
  UpdateDirectoryPermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: UpdateDirectoryServiceMfaSettings
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - UpdateDirectoryServiceEvent
          - Arn
  UpdateDirectoryServiceMfaSettingsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: DuoKmsIamPolicy
      Policies:
        - PolicyName: UpdateDirectoryServiceMfaSettings
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ds:DescribeDirectories
                  - ds:DisableRadius
                  - ds:EnableRadius
                  - ds:UpdateRadius
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  Ref: DuoConfigurationSettingsSecret
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DuoServiceIps}
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  Ref: DuoNotification
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  DuoNotification:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId:
        Fn::GetAtt:
          - DuoKmsKey
          - Arn
      Subscription:
        - Endpoint:
            Ref: NotificationEmail
          Protocol: email
  UpdateDirectoryServiceMfaSettings:
    Type: AWS::Lambda::Function
    Properties:
      Description: Update the Directory Service MFA settings.
      Handler: index.lambda_handler
      KmsKeyArn:
        Fn::GetAtt:
          - DuoKmsKey
          - Arn
      Role:
        Fn::GetAtt:
          - UpdateDirectoryServiceMfaSettingsRole
          - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          ds_id:
            Ref: DirectoryServiceId
          proxy_port:
            Ref: RadiusPortNumber
          rs_arn:
            Ref: DuoConfigurationSettingsSecret
          DuoSsm:
            Ref: DuoServiceIps
          Topic:
            Ref: DuoNotification
      Tags:
        - Key: duo:DirectoryServiceId
          Value:
            Ref: DirectoryServiceId
      Code:
        ZipFile: "import os\nimport boto3\nimport json\nimport time\nfrom enum import Enum\n\nclass RadiusStatus(Enum):\n  Creating = 1\n  Completed = 2\n  Failed = 3\n  NotConfigured = 4\n\nRADIUS_TIMEOUT\
          \ = 5\nRADIUS_RETRIES = 2\nRADIUS_AUTHENTICATION_PROTOCOL = 'PAP'\n\nds_client = boto3.client('ds')\nsc = boto3.client('secretsmanager')\n ssm =boto3.client('ssm')\nsns = boto3.client('sns')\n\
          \nds_id = os.environ['ds_id']\n ips = ssm.get_parameter(Name=os.environ['DuoSsm'])['Parameter']['Value']\n def lambda_handler(event, context):\n  print(json.dumps(event))\n  \n  print('Directory\
          \ Service Id: {}'.format(ds_id))\n  print('Fargate IP Addresses : {}'.format(ips))\n  \n  enable_radius(ds_id, ips)\n\n\ndef enable_radius(ds_id, nlb):\n\n    port = int(os.environ['proxy_port'])\n\
          \    rs = get_rs(os.environ['rs_arn'])\n\n    radius_settings = {\n        \"RadiusServers\": [nlb],\n        \"RadiusPort\": port,\n        \"RadiusTimeout\": RADIUS_TIMEOUT,\n        \"RadiusRetries\"\
          : RADIUS_RETRIES,\n        \"SharedSecret\": rs,\n        \"AuthenticationProtocol\": RADIUS_AUTHENTICATION_PROTOCOL,\n        \"DisplayLabel\": \"Duo MFA\"\n    }\n\n    # Determine whether RADIUS\
          \ has been configured.\n    radius_current = radius_status(ds_id)\n    print('Current RADIUS status: {}.'.format(radius_current))\n\n    # Enable RADIUS.\n    if radius_current in [RadiusStatus.NotConfigured,\
          \ RadiusStatus.Failed]:\n        # Enable the RADIUS settings for this directory.\n        print('Enabling RADIUS configuration...')\n        r = ds_client.enable_radius(\n            DirectoryId\
          \ = ds_id,\n            RadiusSettings = radius_settings\n        )\n\n    # Update RADIUS.\n    elif radius_current == RadiusStatus.Completed:\n        # Update the RADIUS settings for this directory.\n\
          \        print('Updating RADIUS configuration...')\n        r = ds_client.update_radius(\n            DirectoryId = ds_id,\n            RadiusSettings = radius_settings\n        )\n\n\n    # Now\
          \ get the status; updating the directory service is asynchronous.\n    MAX_ATTEMPTS = 40\n    SLEEP_TIME = 15\n    attempt_number = 1\n\n    while attempt_number <= MAX_ATTEMPTS:\n        r =\
          \ ds_client.describe_directories(DirectoryIds=[ds_id])['DirectoryDescriptions'][0]\n\n        print(\"** ATTEMPT {}: {}\".format(attempt_number, r['RadiusStatus']))\n\n        if r['RadiusStatus']\
          \ == 'Completed':\n            print('Radius updated successfully')\n            break\n        elif r['RadiusStatus'] == 'Failed':\n            print('Radius creation failed')\n            break\n\
          \        else:\n            time.sleep(SLEEP_TIME)\n            attempt_number +=1\n    \n    if attempt_number == MAX_ATTEMPTS:\n      print('Radius create/update timed out')\n      msg = 'Duo\
          \ MFA update failed on '+ ds_id +'. Please check.'\n      sns.publish(TopicArn=os.environ['Topic'], Message=msg, Subject='Failed to update MFA')\n\n\ndef radius_status(ds_id):\n    return_value\
          \ = -1\n    r = ds_client.describe_directories(DirectoryIds=[ds_id])['DirectoryDescriptions'][0]\n    if 'RadiusStatus' not in r:\n        return_value = RadiusStatus.NotConfigured\n    elif r['RadiusStatus']\
          \ == 'Completed':\n        return_value = RadiusStatus.Completed\n    elif r['RadiusStatus'] == 'Failed':\n        return_value = RadiusStatus.Failed\n    elif r['RadiusStatus'] == 'Creating':\n\
          \        return_value = RadiusStatus.Creating\n    return return_value\n\ndef get_rs(rs_arn):\n    rs = ''\n    r = sc.get_secret_value(\n        SecretId = rs_arn\n    )\n    if 'SecretString'\
          \ in r:\n        rs = json.loads(r['SecretString'])['RadiusSharedSecret']\n    return rs\n"
  DuoEcsScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity:
        Ref: DuoMaxCapacity
      MinCapacity:
        Ref: RadiusProxyServerCount
      ResourceId:
        Fn::Sub:
          - service/${DuoCluster}/${DuoServiceName}
          - DuoServiceName:
              Fn::GetAtt:
                - DuoService
                - Name
      RoleARN:
        Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  DuoServiceScalingPolicyCpu:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName:
        Fn::Sub: ${AWS::StackName}-target-tracking-cpu70
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: DuoEcsScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
  DuoServiceScalingPolicyMem:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName:
        Fn::Sub: ${AWS::StackName}-target-tracking-mem80
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: DuoEcsScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 80.0
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
  DuoServiceAlarmCpu:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPU alarm for DuoService
      AlarmActions:
        - Ref: DuoNotification
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90.0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ServiceName
          Value:
            Fn::GetAtt:
              - DuoService
              - Name
        - Name: ClusterName
          Value:
            Ref: DuoCluster
  DuoServiceAlarmMemory:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Memory alarm for DuoService
      AlarmActions:
        - Ref: DuoNotification
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90.0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ServiceName
          Value:
            Fn::GetAtt:
              - DuoService
              - Name
        - Name: ClusterName
          Value:
            Ref: DuoCluster
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID:
                Fn::GetAtt:
                  - DuoKmsKey
                  - Arn
  ArtifactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ArtifactBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              - Fn::Sub: arn:${AWS::Partition}:s3:::${ArtifactBucket}/*
            Principal:
              AWS:
                - Fn::GetAtt:
                    - DuoCodeBuildRole
                    - Arn
                - Fn::GetAtt:
                    - DuoCodePipelineRole
                    - Arn
          - Action:
              - s3:ListBucket
            Effect: Allow
            Resource:
              - Fn::Sub: arn:${AWS::Partition}:s3:::${ArtifactBucket}
            Principal:
              AWS:
                - Fn::GetAtt:
                    - DuoCodeBuildRole
                    - Arn
                - Fn::GetAtt:
                    - DuoCodePipelineRole
                    - Arn
          - Action:
              - s3:ListBucket
            Effect: Allow
            Principal: '*'
            Resource:
              Fn::GetAtt:
                - ArtifactBucket
                - Arn
            Condition:
              StringLike:
                aws:userid:
                  - Fn::Join:
                      - ''
                      - - Fn::GetAtt:
                            - DuoCodeBuildRole
                            - RoleId
                        - :*
                  - Fn::Join:
                      - ''
                      - - Fn::GetAtt:
                            - DuoCodePipelineRole
                            - RoleId
                        - :*
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EPolicyWildcardPrincipal
          ignore_reasons:
            - EPolicyWildcardPrincipal: Intent assumed for initial migration.
  DuoEcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName:
        Ref: EcrRepoName
      LifecyclePolicy:
        LifecyclePolicyText:
          Fn::Sub: "{\n  \"rules\": [{\n    \"rulePriority\": 1,\n    \"description\": \"remove older images\",\n    \"selection\": {\n      \"tagStatus\" : \"untagged\",\n      \"countType\": \"sinceImagePushed\"\
            ,\n      \"countUnit\": \"days\",\n      \"countNumber\": ${EcrImageRetention}\n    },\n    \"action\": {\n      \"type\": \"expire\"\n    }\n  }]\n}\n"
  DuoEcrPipelineEvents:
    Type: AWS::Events::Rule
    Properties:
      Description: EventRule
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
        detail:
          state:
            - FAILED
          pipeline:
            - Ref: DuoEcrPipeline
      State: ENABLED
      Targets:
        - Arn:
            Ref: DuoNotification
          Id: DuoEcrPipeline
  DuoNotificationPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: '*'
      Topics:
        - Ref: DuoNotification
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  DuoEcrCodeCommitRepo:
    Type: AWS::CodeCommit::Repository
    DependsOn: DuoCleanupCustomResource
    Properties:
      RepositoryName:
        Ref: CodeCommitRepoName
      RepositoryDescription: CodeCommit Repo with code for building DuoAuthentication Proxy ECR images
      Code:
        BranchName:
          Ref: CodeCommitBranchName
        S3:
          Bucket:
            Ref: ArtifactBucket
          Key:
            Fn::Sub: ${QSS3KeyPrefix}scripts/packages/code_commit.zip
  DuoCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AWSCodeCommitReadOnly
        - Ref: DuoCodeBuildPolicy
        - Ref: DuoKmsIamPolicy
  DuoCodeBuildPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-${AWS::Region}-codebuild
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - codebuild:StartBuild
              - codebuild:BatchGetBuilds
            Effect: Allow
            Resource:
              - Fn::Sub: arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${AWS::StackName}
          - Action:
              - codecommit:UploadArchive
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - DuoEcrCodeCommitRepo
                  - Arn
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              Fn::Sub: arn:${AWS::Partition}:s3:::${ArtifactBucket}/*
          - Effect: Allow
            Resource:
              - Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
  DuoCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - Ref: DuoCodeBuildPolicy
        - Ref: DuoKmsIamPolicy
      Policies:
        - PolicyName: GetEcrAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - inspector2:ListFindings
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:GetRegistryScanningConfiguration
                  - inspector2:Enable
                  - inspector2:Disable
                  - inspector2:ListFindings
                  - inspector2:ListAccountPermissions
                  - inspector2:ListCoverage
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                Resource: '*'
                Condition:
                  StringEquals:
                    iam:AWSServiceName:
                      - inspector2.amazonaws.com
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:UploadLayerPart
                  - ecr:InitiateLayerUpload
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:CompleteLayerUpload
                  - ecr:DescribeImageScanFindings
                  - ecr:DescribeImages
                Resource:
                  Fn::GetAtt:
                    - DuoEcrRepository
                    - Arn
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  DuoCodeBuildEcr:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Build and deploy Duo AuthProxy containers
      EncryptionKey:
        Fn::GetAtt:
          - DuoKmsKey
          - Arn
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: ECR_REPO_NAME
            Type: PLAINTEXT
            Value:
              Ref: DuoEcrRepository
          - Name: AWS_ACCOUNT_NUMBER
            Type: PLAINTEXT
            Value:
              Ref: AWS::AccountId
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
      Name:
        Fn::Sub: ${AWS::StackName}
      ServiceRole:
        Fn::GetAtt:
          - DuoCodeBuildRole
          - Arn
      Source:
        BuildSpec: buildspec.yaml
        Type: CODEPIPELINE
      TimeoutInMinutes: 480
  DuoEcrPipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - DuoCodeBuildPolicy
      - DuoKmsIamPolicy
    Properties:
      ArtifactStore:
        Location:
          Ref: ArtifactBucket
        Type: S3
      RoleArn:
        Fn::GetAtt:
          - DuoCodePipelineRole
          - Arn
      Stages:
        - Actions:
            - ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              Configuration:
                BranchName:
                  Ref: CodeCommitBranchName
                PollForSourceChanges: 'false'
                RepositoryName:
                  Fn::GetAtt:
                    - DuoEcrCodeCommitRepo
                    - Name
              Name: SourceAction
              OutputArtifacts:
                - Name: AppSource
              RunOrder: 1
          Name: Source
        - Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName:
                  Ref: DuoCodeBuildEcr
              InputArtifacts:
                - Name: AppSource
              Name: BuildDuoAuthProxyEcr
              RunOrder: 1
          Name: Build
  DuoEcrPipelineCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action: codepipeline:StartPipelineExecution
                Effect: Allow
                Resource:
                  Fn::Sub: arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${DuoEcrPipeline}
            Version: 2012-10-17
          PolicyName: duo-ecr-pipeline-trigger
  DuoEcrPipelineCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description:
        Fn::Sub: Amazon CloudWatch Rule which triggers the build for DuoAuthProxy ECR when the branch ${CodeCommitBranchName} is updated
      EventPattern:
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceName:
            - Ref: CodeCommitBranchName
          referenceType:
            - branch
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - Fn::GetAtt:
              - DuoEcrCodeCommitRepo
              - Arn
        source:
          - aws.codecommit
      Targets:
        - Arn:
            Fn::Sub: arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${DuoEcrPipeline}
          Id: DuoEcrPipeline
          RoleArn:
            Fn::GetAtt:
              - DuoEcrPipelineCloudWatchEventRole
              - Arn
  DuoEcrPipelineWeeklyTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: Amazon CloudWatch Rule which triggers the build for DuoAuthProxy ECR on a weekly basis
      ScheduleExpression:
        Fn::Sub: cron(${EcrCronExpression})
      Targets:
        - Arn:
            Fn::Sub: arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${DuoEcrPipeline}
          Id: DuoEcrPipeline
          RoleArn:
            Fn::GetAtt:
              - DuoEcrPipelineCloudWatchEventRole
              - Arn
  DuoCustomResourceEvent:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Duo SNS event response for Custom Resource backed by SNS
      Type: String
      Value: default
  DuoSnsCustomResourceTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId:
        Fn::GetAtt:
          - DuoKmsKey
          - Arn
  DuoPipelineSnsEvents:
    Type: AWS::Events::Rule
    Properties:
      Description: EventRule
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
        detail:
          state:
            - FAILED
            - SUCCEEDED
            - CANCELED
          pipeline:
            - Ref: DuoEcrPipeline
      State: ENABLED
      Targets:
        - Arn:
            Ref: DuoSnsCustomResourceTopic
          Id: DuoSnsCustomResourceTopic
        - Arn:
            Fn::GetAtt:
              - DuoSnsCustomResourceLambda
              - Arn
          Id: DuoSnsCustomResourceLambda
  DuoSnsCustomResourceTopicSubscriptionLambda:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt:
          - DuoSnsCustomResourceLambda
          - Arn
      Protocol: lambda
      TopicArn:
        Ref: DuoSnsCustomResourceTopic
  DuoSnsCustomResource:
    DependsOn:
      - DuoSnsCustomResourcePermissionLambda
      - DuoSnsCustomResourceTopicSubscriptionLambda
      - DuoPipelineSnsEvents
    Type: Custom::Poller
    Properties:
      ServiceToken:
        Ref: DuoSnsCustomResourceTopic
      Pipeline:
        Ref: DuoEcrPipeline
  DuoSnsCustomResourcePermissionLambda:
    DependsOn: DuoSnsCustomResourceTopicSubscriptionLambda
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - DuoSnsCustomResourceLambda
          - Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: DuoSnsCustomResourceTopic
  DuoSnsCustomResourceEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - DuoSnsCustomResourceLambda
          - Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - DuoPipelineSnsEvents
          - Arn
  DuoSnsCustomResourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: DuoKmsIamPolicy
      Policies:
        - PolicyName: DuoSnsCustomResourceEvent
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter*
                Resource:
                  Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DuoCustomResourceEvent}
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
  DuoSnsCustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Gathers event stream from Custom Resource and CodePipeline
      Handler: index.lambda_handler
      KmsKeyArn:
        Fn::GetAtt:
          - DuoKmsKey
          - Arn
      Role:
        Fn::GetAtt:
          - DuoSnsCustomResourceLambdaRole
          - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          SnsEvent:
            Ref: DuoCustomResourceEvent
      Tags:
        - Key: duo:DirectoryServiceId
          Value:
            Ref: DirectoryServiceId
      Code:
        ZipFile: "import json\nimport cfnresponse\nimport boto3\nimport os\nssm = boto3.client('ssm')\ndef lambda_handler(event, context):\n  print(json.dumps(event))\n  if  'Records' in event:\n    print('Message\
          \ from SNS')\n    cfn_event = event['Records'][0]['Sns']['Message']\n    cfn_json = json.loads(cfn_event)\n    try:\n      if cfn_json['RequestType'] == 'Create':\n        print('Create event,\
          \ will place the event in SSM')\n        ssm.put_parameter(Name=os.environ['SnsEvent'],Value=cfn_event,Type='String',Overwrite=True)\n      else:\n        print('This is Update or Delete event,\
          \ will send success')\n        cfnresponse.send(cfn_json, context, cfnresponse.SUCCESS, {}, '')\n    except:\n      cfnresponse.send(cfn_json, context, cfnresponse.FAILED, {}, '')\n  if 'source'\
          \ in event:\n    if event['source'] == 'aws.codepipeline':\n      print('CodePipeline event, checkint the detail')\n      cfn_event = ssm.get_parameter(Name=os.environ['SnsEvent'])['Parameter']['Value']\n\
          \      cfn_json = json.loads(cfn_event)\n      if event['detail']['state'] == 'SUCCEEDED':\n        print('Pipeline is succeded')\n        cfnresponse.send(cfn_json, context, cfnresponse.SUCCESS,\
          \ {}, '')\n      else:\n        print('CodePipeline is failed or cancelled')\n        cfnresponse.send(cfn_json, context, cfnresponse.FAILED, {}, '')\n"
  DuoKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key to encrypt all of Duo AuthProxy related resources
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Allow full access to key metadata to the root account
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Fn::If:
              - NoKmsAdmin
              - Ref: AWS::NoValue
              - Sid: Allow administration of the key
                Effect: Allow
                Principal:
                  AWS:
                    Ref: AdminArn
                Action:
                  - kms:Create*
                  - kms:Describe*
                  - kms:Enable*
                  - kms:List*
                  - kms:Put*
                  - kms:Update*
                  - kms:Revoke*
                  - kms:Disable*
                  - kms:Get*
                  - kms:Delete*
                  - kms:ScheduleKeyDeletion
                  - kms:CancelKeyDeletion
                Resource: '*'
          - Sid: Allow AWS Services to use the key
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
              - kms:DescribeKey
            Resource: '*'
            Condition:
              StringEquals:
                kms:CallerAccount:
                  Ref: AWS::AccountId
                kms:ViaService:
                  - Fn::Sub: lambda.${AWS::Region}.amazonaws.com
                  - Fn::Sub: sns.${AWS::Region}.amazonaws.com
                  - Fn::Sub: s3.${AWS::Region}.amazonaws.com
                  - Fn::Sub: secretsmanager.${AWS::Region}.amazonaws.com
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  DuoKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/duoAuthProxy
      TargetKeyId:
        Ref: DuoKmsKey
  DuoKmsIamPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:DescribeKey
              - kms:GetPublicKey
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - DuoKmsKey
                - Arn
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
  DuoCleanupServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: DuoKmsIamPolicy
      Policies:
        - PolicyName: DuoEcrCleanup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:DescribeImages
                  - ecr:BatchDeleteImage
                Resource:
                  Fn::GetAtt:
                    - DuoEcrRepository
                    - Arn
        - PolicyName: s3-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucketVersion*
                  - s3:ListBucket
                  - s3:DeleteObjectVersion
                  - s3:GetObjectVersion*
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:s3:::${ArtifactBucket}
                  - Fn::Sub: arn:${AWS::Partition}:s3:::${ArtifactBucket}/*
                  - Fn::Sub: arn:${AWS::Partition}:s3:::${QSS3BucketName}
                  - Fn::Sub: arn:${AWS::Partition}:s3:::${QSS3BucketName}/*
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
  DuoCleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Cleanup ECR images and S3 artifact bucket on delete of stack
      Handler: index.lambda_handler
      KmsKeyArn:
        Fn::GetAtt:
          - DuoKmsKey
          - Arn
      Role:
        Fn::GetAtt:
          - DuoCleanupServiceRole
          - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DuoEcr:
            Ref: DuoEcrRepository
          DuoBucket:
            Ref: ArtifactBucket
      Code:
        ZipFile: "import json\nimport cfnresponse\nimport boto3\nimport os\nimport time\necr = boto3.client('ecr')\ns3 = boto3.resource('s3')\necr_repo = os.environ['DuoEcr']\nartifact_bucket = os.environ['DuoBucket']\n\
          bucket = s3.Bucket(artifact_bucket)\n \ndef lambda_handler(event, context):\n  print(json.dumps(event))\n  source_bucket = event['ResourceProperties']['Source']\n  source_bucket_prefix = event['ResourceProperties']['Prefix']\n\
          \  objects = event['ResourceProperties']['Objects']\n  try:\n    if event['RequestType'] == 'Delete':\n      print('Delete event, will clean up ECR and S3')\n      time.sleep(120)\n      delete_all_ecr_images(ecr_repo)\n\
          \      bucket.object_versions.all().delete()\n    elif event['RequestType'] == 'Create':\n      print('Create event, will populate S3')\n      s3 = boto3.client('s3')\n      for o in objects:\n\
          \          key = source_bucket_prefix + o\n          copy_source={\n              'Bucket': source_bucket,\n              'Key': key\n          }\n          s3.copy_object(CopySource=copy_source,\
          \ Bucket=artifact_bucket, Key=key)\n\n    else:\n      print('This is Update event, will send success')\n    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')\n  except:\n    cfnresponse.send(event,\
          \ context, cfnresponse.SUCCESS, {}, '')\n\ndef delete_all_ecr_images(ecr_repo):\n  len_images = ecr.describe_images(repositoryName=ecr_repo)['imageDetails']\n  while len(len_images) > 0:\n   \
          \ for image in len_images:\n      ecr.batch_delete_image(repositoryName=ecr_repo,imageIds = [{'imageDigest': image['imageDigest']}])\n    len_images = ecr.describe_images(repositoryName=ecr_repo)['imageDetails']\n"
  DuoCleanupCustomResource:
    Type: Custom::DuoCleanup
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - DuoCleanupFunction
          - Arn
      DuoEcr:
        Ref: DuoEcrRepository
      DuoBucket:
        Ref: ArtifactBucket
      Source:
        Ref: QSS3BucketName
      Prefix:
        Ref: QSS3KeyPrefix
      SourceRegion:
        Ref: QSS3BucketRegion
      Objects:
        - scripts/packages/code_commit.zip
Outputs:
  DuoRadiusProxyVpc:
    Value:
      Fn::GetAtt:
        - GetDirectoryServiceDetails
        - VpcId
    Description: VPC ID of directory
  ArtifactBucket:
    Value:
      Ref: ArtifactBucket
    Description: S3 bucket to store CodePipeline Artifacts
  DuoCluster:
    Value:
      Ref: DuoCluster
    Description: ECS Fargate Cluster for Duo AuthProxy
  DuoCodeBuildEcr:
    Value:
      Ref: DuoCodeBuildEcr
    Description: CodeBuild Project that builds the ECR image for Duo AuthProxy
  DuoCodeBuildPolicy:
    Value:
      Ref: DuoCodeBuildPolicy
    Description: IAM policy to allow CodeBuild to build ECR images
  DuoCodeBuildRole:
    Value:
      Ref: DuoCodeBuildRole
    Description: IAM role for CodeBuild
  DuoCodePipelineRole:
    Value:
      Ref: DuoCodePipelineRole
    Description: IAM Role for CodePipeline
  DuoConfigurationSettingsSecret:
    Value:
      Ref: DuoConfigurationSettingsSecret
    Description: Secrets Manager secret that stores the Duo AuthProxy information
  DuoConfigurationSettingsSecretRotationLambdaInvokePermission:
    Value:
      Ref: DuoConfigurationSettingsSecretRotationLambdaInvokePermission
    Description: Lambda permission to allow Secrets Manager
  DuoConfigurationSettingsSecretRotationSchedule:
    Value:
      Ref: DuoConfigurationSettingsSecretRotationSchedule
    Description: Secrets Manager Rotation Schedule
  DuoCustomResourceEvent:
    Value:
      Ref: DuoCustomResourceEvent
    Description: CloudWatch event for CodePipeline status for Custom Resource
  DuoEcrCodeCommitRepo:
    Value:
      Ref: DuoEcrCodeCommitRepo
    Description: CodeCommit repo for Duo AuthProxy
  DuoEcrPipeline:
    Value:
      Ref: DuoEcrPipeline
    Description: CodePipeline for building Duo AuthProxy images
  DuoEcrPipelineCloudWatchEventRole:
    Value:
      Ref: DuoEcrPipelineCloudWatchEventRole
    Description: IAM role to trigger CodePipeline based on CodeCommit
  DuoEcrPipelineCloudWatchEventRule:
    Value:
      Ref: DuoEcrPipelineCloudWatchEventRule
    Description: Event based trigger on CodePipeline
  DuoEcrPipelineEvents:
    Value:
      Ref: DuoEcrPipelineEvents
    Description: Events on Duo AuthProxy CodePipeline
  DuoEcrPipelineWeeklyTrigger:
    Value:
      Ref: DuoEcrPipelineWeeklyTrigger
    Description: Weekly trigger for building Duo AuthProxy images
  DuoEcrRepository:
    Value:
      Ref: DuoEcrRepository
    Description: Elastic Container Repository for Duo AuthProxy
  DuoEcsScalableTarget:
    Value:
      Ref: DuoEcsScalableTarget
    Description: ECS scalable target for Duo AuthProxy
  DuoKmsIamPolicy:
    Value:
      Ref: DuoKmsIamPolicy
    Description: IAM policy for KMS key
  DuoKmsKey:
    Value:
      Ref: DuoKmsKey
    Description: KMS Key for Duo AuthProxy
  DuoKmsKeyAlias:
    Value:
      Ref: DuoKmsKeyAlias
    Description: KMS Key alias for Duo AuthProxy
  DuoNotification:
    Value:
      Ref: DuoNotification
    Description: Email notification to Duo Admins
  DuoNotificationPolicy:
    Value:
      Ref: DuoNotificationPolicy
    Description: Allow other AWS services to send email incase of failures to Duo Admins
  DuoPipelineSnsEvents:
    Value:
      Ref: DuoPipelineSnsEvents
    Description: CodePipeline events for Custom Resource on Create
  DuoService:
    Value:
      Ref: DuoService
    Description: ECS service for Duo AuthProxy
  DuoServiceAlarmCpu:
    Value:
      Ref: DuoServiceAlarmCpu
    Description: Alarm to notify admins for ECS Service CPU
  DuoServiceAlarmMemory:
    Value:
      Ref: DuoServiceAlarmMemory
    Description: Alarm to notify admins for ECS Service Memory
  DuoServiceEvents:
    Value:
      Ref: DuoServiceEvents
    Description: Event stream for Duo ECS service
  DuoServiceIps:
    Value:
      Ref: DuoServiceIps
    Description: SSM parameter store for Fargate IPs
  DuoServiceScalingPolicyCpu:
    Value:
      Ref: DuoServiceScalingPolicyCpu
    Description: Duo ECS service Application Auto Scaling for CPU
  DuoServiceScalingPolicyMem:
    Value:
      Ref: DuoServiceScalingPolicyMem
    Description: Duo ECS service Application Auto Scaling for memory
  DuoServiceSg:
    Value:
      Ref: DuoServiceSg
    Description: EC2 Security group for Duo Fargate Service
  DuoSnsCustomResource:
    Value:
      Ref: DuoSnsCustomResource
    Description: SNS backed custom resource for ECR image
  DuoSnsCustomResourceEventsToInvokeLambda:
    Value:
      Ref: DuoSnsCustomResourceEventsToInvokeLambda
    Description: Allow Custom Resource SNS to invoke Lambda
  DuoSnsCustomResourceLambda:
    Value:
      Ref: DuoSnsCustomResourceLambda
    Description: Lambda function to process custom resource events
  DuoSnsCustomResourceLambdaRole:
    Value:
      Ref: DuoSnsCustomResourceLambdaRole
    Description: IAM role for lambda to process custom resource events
  DuoSnsCustomResourcePermissionLambda:
    Value:
      Ref: DuoSnsCustomResourcePermissionLambda
    Description: Allow Events to invoke lambda
  DuoSnsCustomResourceTopic:
    Value:
      Ref: DuoSnsCustomResourceTopic
    Description: SNS topic for Custom Resource
  DuoSnsCustomResourceTopicSubscriptionLambda:
    Value:
      Ref: DuoSnsCustomResourceTopicSubscriptionLambda
    Description: SNS Subscription from Custom Resource to lambda
  DuoTaskDefinition:
    Value:
      Ref: DuoTaskDefinition
    Description: ECS Task Definition for Duo AuthProxy
  DuoTaskRoleArn:
    Value:
      Ref: DuoTaskRoleArn
    Description: IAM role for ECS Fargate tasks
  GetDirectoryServiceDetails:
    Value:
      Ref: GetDirectoryServiceDetails
    Description: Custom Resource to get Directory Service Details
  GetDirectoryServiceFunction:
    Value:
      Ref: GetDirectoryServiceFunction
    Description: Lambda function to get Directory Service details
  GetDirectoryServiceMfaSettingsRole:
    Value:
      Ref: GetDirectoryServiceMfaSettingsRole
    Description: IAM role to get Directory Service details
  PermissionForEventsToInvokeLambda:
    Value:
      Ref: PermissionForEventsToInvokeLambda
    Description: Allow Duo ECS Service events to trigger Lambda
  ProcessDuoServiceEventsRole:
    Value:
      Ref: ProcessDuoServiceEventsRole
    Description: IAM role to process ECS service events
  ProcessDuoServiceFunction:
    Value:
      Ref: ProcessDuoServiceFunction
    Description: Lambda function to process ECS Service events
  RadiusProxyCloudWatchLogsGroup:
    Value:
      Ref: RadiusProxyCloudWatchLogsGroup
    Description: CloudWatch log group for Duo ECS Service
  RadiusSharedSecretRotationRole:
    Value:
      Ref: RadiusSharedSecretRotationRole
    Description: IAM role to allow Secrets Manager Rotation
  RotateRadiusSharedSecretFunction:
    Value:
      Ref: RotateRadiusSharedSecretFunction
    Description: Lambda function to rotate secrets
  UpdateDirectoryPermissionForEventsToInvokeLambda:
    Value:
      Ref: UpdateDirectoryPermissionForEventsToInvokeLambda
    Description: Allow change in Fargate IPs to trigger lambda via SSM
  UpdateDirectoryServiceEvent:
    Value:
      Ref: UpdateDirectoryServiceEvent
    Description: Fargate IP change event
  UpdateDirectoryServiceMfaSettings:
    Value:
      Ref: UpdateDirectoryServiceMfaSettings
    Description: Lambda function to update MFA of directory
  UpdateDirectoryServiceMfaSettingsRole:
    Value:
      Ref: UpdateDirectoryServiceMfaSettingsRole
    Description: IAM role to allow update MFA of Directory
  Postdeployment:
    Value: https://fwd.aws/n7wKB?
    Description: See the deployment guide for post-deployment steps.
