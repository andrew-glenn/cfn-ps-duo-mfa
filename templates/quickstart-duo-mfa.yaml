AWSTemplateFormatVersion: 2010-09-09
Description: "Configures Duo RADIUS servers for use in directory service MFA (can be used for AWS SSO, WorkSpaces, and other SAML service providers)(qs-1pgpn37rj)\n"
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W1020
        - W3011
        - W9001
        - W9006
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Duo account settings
        Parameters:
          - DuoIntegrationKey
          - DuoSecretKey
          - DuoApiHostName
      - Label:
          default: RADIUS proxy configuration settings
        Parameters:
          - DirectoryServiceId
          - LatestAmiId
          - RadiusProxyServerCount
          - RadiusPortNumber
          - DuoFailMode
      - Label:
          default: AWS Quick Start configuration settings
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
    ParameterLabels:
      DuoIntegrationKey:
        default: Duo integration key
      DuoSecretKey:
        default: Duo secret key
      DuoApiHostName:
        default: Duo hostname
      DirectoryServiceId:
        default: Directory service ID
      LatestAmiId:
        default: Amazon Linux image ID
      RadiusProxyServerCount:
        default: RADIUS servers
      RadiusPortNumber:
        default: RADIUS port number
      DuoFailMode:
        default: Duo fail mode
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
Parameters:
  DuoIntegrationKey:
    Type: String
    Description: "Integration key retrieved from Duo RADIUS application configuration\n"
  DuoSecretKey:
    Type: String
    NoEcho: true
    Description: "Secret key retrieved from Duo RADIUS application configuration\n"
  DuoApiHostName:
    Type: String
    Description: "API host name retrieved from Duo RADIUS application configuration\n"
    AllowedPattern: ^api\-[a-zA-Z0-9]*.duosecurity.com$
    ConstraintDescription: "API hostname must match pattern api-12345678.duosecurity.com\n"
  DirectoryServiceId:
    Type: String
    Description: "ID of existing directory service (d-xxxxxxxxxx)\n"
    AllowedPattern: ^d\-[a-zA-Z0-9]{10,}$
    ConstraintDescription: "Directory Service Id must match pattern d-0123456789\n"
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
    Description: "Parameter Store location used to retrieve the latest Amazon Linux ID (** use this default value **)\n"
  RadiusProxyServerCount:
    Type: Number
    AllowedValues:
      - 1
      - 2
      - 3
      - 4
    Default: 2
    Description: "The number of RADIUS proxy servers to create.\n"
  RadiusPortNumber:
    Type: String
    Description: "Port on which to listen for incoming RADIUS access requests\n"
    Default: 1812
  DuoFailMode:
    Type: String
    Description: "Once primary authentication succeeds, Safe mode allows authentication attempts, if the Duo service cannot be contacted. Secure mode rejects authentication attempts, if the Duo service\
      \ cannot be contacted.\n"
    AllowedValues:
      - safe
      - secure
    Default: safe
  QSS3BucketName:
    Description: S3 bucket name for the Quick Start assets.
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Default: aws-ia
    Type: String
  QSS3BucketRegion:
    Default: us-east-1
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.
    Type: String
  QSS3KeyPrefix:
    Description: S3 key prefix for the Quick Start assets.
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    Default: cfn-ps-duo-mfa/
    Type: String
Conditions:
  UsingDefaultBucket:
    Fn::Equals:
      - Ref: QSS3BucketName
      - aws-ia
Resources:
  GetDirectoryServiceMfaSettingsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: GetDirectoryServiceMfaSettingsRole-${DirectoryServiceId}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeDirectoryServices
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ds:DescribeDirectories
                Resource: '*'
  GetDirectoryServiceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: GetDirectoryService-${DirectoryServiceId}
      Description: Look up directory service
      Handler: index.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - GetDirectoryServiceMfaSettingsRole
          - Arn
      Runtime: python3.9
      Timeout: 60
      Tags:
        - Key: duo:DirectoryServiceId
          Value:
            Ref: DirectoryServiceId
      Code:
        ZipFile:
          Fn::Sub: "import boto3\nimport cfnresponse\nimport json\n\n#----------------------------------------\n # Function handler\n#----------------------------------------\ndef lambda_handler(event,\
            \ context):\n\n    print (json.dumps(event))\n\n    responseStatus = cfnresponse.SUCCESS\n    responseData = {}\n\n    # For Delete requests, immediately send a SUCCESS response.\n    if 'RequestType'\
            \ in event and 'Delete' in event['RequestType']:\n        cfnresponse.send(event, context, responseStatus, responseData)\n        return\n\n    errorReason = None\n    directories = []\n\n \
            \   if not 'ResourceProperties' in event and not 'directory_id' in event['ResourceProperties']:\n        errorReason = \"No directory_id value provided\"\n    else:\n        directory_id = event['ResourceProperties']['directory_id']\n\
            \n        try:\n          directories = boto3.client('ds').describe_directories(DirectoryIds = [directory_id])['DirectoryDescriptions']\n        except:\n          pass\n\n        if not directories:\n\
            \            errorReason =  \" No directory exists for ID: {}\".format(directory_id)\n        else:\n            directory = directories[0]\n\n            network = ''\n\n            if directory['Type']\
            \ == 'ADConnector': network = 'ConnectSettings'\n            elif directory['Type'] == 'MicrosoftAD': network = 'VpcSettings'\n\n\n            if len(directory[network]['SubnetIds']) < 2:\n\
            \                errorReason = \"There must be at least two subnets configured for AD.\"\n\n            elif len(directory['DnsIpAddrs']) < 2:\n                errorReason = \"There must be\
            \ at least two DNS servers configured for AD.\"\n\n            else:\n                responseData['VpcId'] = directory[network]['VpcId']\n                responseData['SecurityGroupId'] = directory[network]['SecurityGroupId']\n\
            \                responseData['SubnetId1'] = directory[network]['SubnetIds'][0]\n                responseData['SubnetId2'] = directory[network]['SubnetIds'][1]\n\n    if errorReason:\n     \
            \   responseStatus = cfnresponse.FAILED\n\n    # Send the response to CloudFormation. Always send a success response;\n    # otherwise, the CloudFormation stack execution will fail.\n    cfnresponse.send(event,\
            \ context, responseStatus, responseData, reason=errorReason)\n"
  GetDirectoryServiceDetails:
    Type: Custom::GetDirectoryService
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - GetDirectoryServiceFunction
          - Arn
      directory_id:
        Ref: DirectoryServiceId
  DuoConfigurationSettingsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Sub: DuoConfigurationSettings-${DirectoryServiceId}
      Description: Duo Configuration Settings
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Sub: "{\n  \"DuoSecretKey\":\"${DuoSecretKey}\",\n  \"DuoIntegrationKey\":\"${DuoIntegrationKey}\",\n  \"DuoApiHostName\":\"${DuoApiHostName}\"\n}\n"
        GenerateStringKey: RadiusSharedSecret
        PasswordLength: 25
        ExcludeCharacters: '"=,'
      Tags:
        - Key: duo:DirectoryServiceId
          Value:
            Ref: DirectoryServiceId
  DuoConfigurationSettingsSecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: DuoConfigurationSettingsSecretRotationLambdaInvokePermission
    Properties:
      SecretId:
        Ref: DuoConfigurationSettingsSecret
      RotationLambdaARN:
        Fn::GetAtt:
          - RotateRadiusSharedSecretFunction
          - Arn
      RotationRules:
        AutomaticallyAfterDays: 7
  DuoConfigurationSettingsSecretRotationLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: RotateRadiusSharedSecretFunction
      Action: lambda:InvokeFunction
      Principal: secretsmanager.amazonaws.com
  RadiusProxyBootstrapCompleteTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: RadiusStatus
      TopicName:
        Fn::Sub: RadiusProxyBootstrapComplete-${DirectoryServiceId}
      Subscription:
        - Endpoint:
            Fn::GetAtt:
              - UpdateDirectoryServiceMfaSettings
              - Arn
          Protocol: lambda
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: InstanceRole-${DirectoryServiceId}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: InstancePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  Ref: RadiusProxyBootstrapCompleteTopic
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  Ref: DuoConfigurationSettingsSecret
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/DuoRadiusConfiguration/${DirectoryServiceId}/CloudWatchAgentConfiguration
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                Resource: '*'
              - Effect: Allow
                Action:
                  - ds:DescribeDirectories
                Resource: '*'
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: InstanceRole
  DuoRadiusProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Duo RADIUS proxies
      VpcId:
        Fn::GetAtt:
          - GetDirectoryServiceDetails
          - VpcId
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort:
            Ref: RadiusPortNumber
          ToPort:
            Ref: RadiusPortNumber
          SourceSecurityGroupId:
            Fn::GetAtt:
              - GetDirectoryServiceDetails
              - SecurityGroupId
          Description: Allows UDP from Directory Service Domain Controllers
      SecurityGroupEgress:
        - IpProtocol: 6
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: 6
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Duo RADIUS Security Group
        - Key: duo:DirectoryServiceId
          Value:
            Ref: DirectoryServiceId
  RadiusProxyLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: LatestAmiId
      InstanceType: t2.micro
      IamInstanceProfile:
        Ref: InstanceProfile
      SecurityGroups:
        - Ref: DuoRadiusProxySecurityGroup
  RadiusProxyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName:
        Fn::Sub: RadiusProxyAutoScalingGroup-${DirectoryServiceId}
      VPCZoneIdentifier:
        - Fn::GetAtt:
            - GetDirectoryServiceDetails
            - SubnetId1
        - Fn::GetAtt:
            - GetDirectoryServiceDetails
            - SubnetId2
      LaunchConfigurationName:
        Ref: RadiusProxyLaunchConfig
      MinSize: 1
      MaxSize:
        Ref: RadiusProxyServerCount
      DesiredCapacity:
        Ref: RadiusProxyServerCount
      NotificationConfigurations:
        - NotificationTypes:
            - autoscaling:EC2_INSTANCE_TERMINATE
          TopicARN:
            Ref: RadiusProxyBootstrapCompleteTopic
      Tags:
        - Key: Name
          Value: Duo RADIUS Proxy Server
          PropagateAtLaunch: true
        - Key: duo:DirectoryServiceId
          Value:
            Ref: DirectoryServiceId
          PropagateAtLaunch: true
  RadiusProxyCloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: RadiusProxyLogs-${DirectoryServiceId}/authproxy.log
      RetentionInDays: 30
  CloudWatchLogsAgentConfigurationParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: /DuoRadiusConfiguration/${DirectoryServiceId}/CloudWatchAgentConfiguration
      Description: Configuration for CloudWatch Logs agent
      Type: String
      Value:
        Fn::Sub: "{\n  \"logs\": {\n    \"logs_collected\": {\n      \"files\": {\n        \"collect_list\": [\n          {\n            \"file_path\": \"/opt/duoauthproxy/log/authproxy.log\",\n       \
          \     \"log_group_name\": \"${RadiusProxyCloudWatchLogsGroup}\",\n            \"log_stream_name\": \"{instance_id}\",\n            \"timezone\": \"Local\"\n          }\n        ]\n      }\n  \
          \  }\n  }\n}\n"
  InstallAndConfigureDuoProxyServiceDocument:
    Type: AWS::SSM::Document
    DependsOn: DuoConfigurationSettingsSecret
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Installs and configures Duo proxy service
        mainSteps:
          - action: aws:runShellScript
            precondition:
              StringEquals:
                - platformType
                - Linux
            name: InstallProxyService
            inputs:
              runCommand:
                - Fn::Sub: "sudo su\n\necho \"************************************************************\"\necho \"* Running as $(whoami)\"\necho \"************************************************************\"\
                    \n\necho\necho \"************************************************************\"\necho \"* Installing updates\"\necho \"************************************************************\"\n\
                    yum update -y\n\nif [ ! -f /opt/duoauthproxy/conf/authproxy.cfg ]; then\n  echo\n  echo \"************************************************************\"\n  echo \"* Installing prerequisites\"\
                    \n  echo \"************************************************************\"\n  yum install gcc make openssl-devel python-devel libffi-devel jq -y\n\n  # Upgrade the AWS CLI.\n  pip install\
                    \ awscli --upgrade\n\n  echo\n  echo \"************************************************************\"\n  echo \"* Downloading and installing Duo proxy\"\n  echo \"************************************************************\"\
                    \n  cd /tmp\n  wget https://dl.duosecurity.com/duoauthproxy-latest-src.tgz\n\n  tar xzf duoauthproxy-*.tgz\n  rm duoauthproxy-*.tgz\n  cd duoauthproxy-*-src\n  make\n  cd duoauthproxy-build\n\
                    \n  ./install --install-dir=/opt/duoauthproxy --service-user=nobody --create-init-script=yes --log-group=duo_authproxy_grp\nelse\n  echo\n  echo \"************************************************************\"\
                    \n  echo \"* Not installing Duo proxy service\"\n  echo \"* Reason: /opt/duoauthproxy/conf/authproxy.cfg exists\"\n  echo \"************************************************************\"\
                    \nfi\n\necho\necho \"************************************************************\"\necho \"* Configuring Duo proxy service\"\necho \"************************************************************\"\
                    \necho Retreiving Secrets Manager secret: DuoConfigurationSettings-${DirectoryServiceId}\n aws configure set region ${AWS::Region}\nsecret=$(aws secretsmanager get-secret-value --secret-id\
                    \ DuoConfigurationSettings-${DirectoryServiceId} | jq .SecretString | jq fromjson)\nradius_shared_secret=$(echo $secret | jq -r .RadiusSharedSecret)\nduo_secret_key=$(echo $secret |\
                    \ jq -r .DuoSecretKey)\n\n# Create the authproxy.cfg file.\ncat > /opt/duoauthproxy/conf/authproxy.cfg <<EOL\n[duo_only_client]\n\n[radius_server_duo_only]\nikey=${DuoIntegrationKey}\n\
                    \ skey=$duo_secret_key\napi_host=${DuoApiHostName}\nfailmode=${DuoFailMode}\n port=${RadiusPortNumber}\nEOL\n\n# First, determine whether this is an AD Connector or a Managed AD,\n#\
                    \ then get the list of domain controllers for the directory.\nDIRECTORY_SERVICE_TYPE=$(aws ds describe-directories --directory-ids ${DirectoryServiceId} --output json --query DirectoryDescriptions[0].Type\
                    \ --output text)\nif [ \"$DIRECTORY_SERVICE_TYPE\" = \"ADConnector\" ];then\n    aws ds describe-directories --directory-ids ${DirectoryServiceId} --output json --query DirectoryDescriptions[0].ConnectSettings.ConnectIps\
                    \ > ip_addresses.json\nelse\n    aws ds describe-directories --directory-ids ${DirectoryServiceId} --output json --query DirectoryDescriptions[0].DnsIpAddrs > ip_addresses.json\nfi\n\
                    \necho\necho \"************************************************************\"\necho \"* Updating authproxy.cfg with Domain Controller IPs:\"\n echo \"************************************************************\"\
                    \ncat ip_addresses.json\n\nindex=1\n\n# Add entries in the authproxy.cfg file for each domain controller.\njq -c -r '.[]' ip_addresses.json | while read ip_address; do\n  echo radius_ip_$index=$ip_address\
                    \ >> /opt/duoauthproxy/conf/authproxy.cfg\n  echo radius_secret_$index=$radius_shared_secret >> /opt/duoauthproxy/conf/authproxy.cfg\n  ((index++))\ndone\n\necho\n echo \"************************************************************\"\
                    \necho \"* Starting Duo proxy service\"\necho \"************************************************************\"\n/opt/duoauthproxy/bin/authproxyctl restart\n\necho\necho \"************************************************************\"\
                    \necho \"* Duo proxy configuration complete\"\necho \"************************************************************\"\ninstance_id=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)\n\
                    \ aws ec2 create-tags --resources $instance_id --tags Key=RadiusConfigured,Value=True\n aws sns publish --topic-arn ${RadiusProxyBootstrapCompleteTopic} --message \"{\\\"InstanceId\\\
                    \":\\\"$instance_id\\\",\\\"RunTask\\\":\\\"EnableRadius\\\"}\"\necho Published message to SNS topic: ${RadiusProxyBootstrapCompleteTopic}\n"
  RadiusProxyBootstrapDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Bootstraps RADIUS proxies
        parameters:
          DirectoryServiceId:
            type: String
            description: ID of the Directory Service directory
        mainSteps:
          - action: aws:runDocument
            name: UpdateSsmAgent
            inputs:
              documentType: SSMDocument
              documentPath: AWS-UpdateSSMAgent
          - action: aws:runDocument
            name: InstallCloudWatchLogsAgent
            inputs:
              documentType: SSMDocument
              documentPath: AWS-ConfigureAWSPackage
              documentParameters: '{"action":"Install","name":"AmazonCloudWatchAgent"}'
          - action: aws:runDocument
            name: ConfigureCloudWatchLogsAgent
            inputs:
              documentType: SSMDocument
              documentPath: AmazonCloudWatch-ManageAgent
              documentParameters:
                Fn::Sub: "{\n  \"action\": \"configure\",\n  \"optionalConfigurationLocation\": \"${CloudWatchLogsAgentConfigurationParameter}\",\n  \"optionalRestart\": \"yes\",\n  \"mode\": \"ec2\",\n\
                  \  \"optionalConfigurationSource\": \"ssm\"\n}\n"
          - action: aws:runDocument
            name: InstallAndConfigureDuoProxyService
            precondition:
              StringEquals:
                - platformType
                - Linux
            inputs:
              documentType: SSMDocument
              documentPath:
                Ref: InstallAndConfigureDuoProxyServiceDocument
      Tags:
        - Key: duo:DirectoryServiceId
          Value:
            Ref: DirectoryServiceId
  RadiusProxyBootstrapSystemsManagerBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: duo:DirectoryServiceId
          Value:
            Ref: DirectoryServiceId
  RadiusProxyBootstrapDocumentAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name:
        Ref: RadiusProxyBootstrapDocument
      AssociationName:
        Fn::Sub: BootstrapRadiusProxies-${DirectoryServiceId}
      OutputLocation:
        S3Location:
          OutputS3BucketName:
            Ref: RadiusProxyBootstrapSystemsManagerBucket
          OutputS3KeyPrefix: logs
      Parameters:
        DirectoryServiceId:
          - Ref: DirectoryServiceId
      Targets:
        - Key: tag:duo:DirectoryServiceId
          Values:
            - Ref: DirectoryServiceId
  UpdateDirectoryServiceMfaSettingsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: UpdateDirectoryServiceMfaSettingsRole-${DirectoryServiceId}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: UpdateDirectoryServiceMfaSettings
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:CompleteLifecycleAction
                  - ds:DescribeDirectories
                  - ds:DisableRadius
                  - ds:EnableRadius
                  - ds:UpdateRadius
                  - ec2:DescribeInstances
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  Ref: DuoConfigurationSettingsSecret
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  UpdateDirectoryServiceMfaSettings:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      FunctionName:
        Fn::Sub: UpdateDirectoryServiceMfaSettings-${DirectoryServiceId}
      Description: Update the directory service MFA settings
      Handler: lambda_function.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - UpdateDirectoryServiceMfaSettingsRole
          - Arn
      Runtime: python3.9
      Timeout: 180
      Environment:
        Variables:
          directory_service_id:
            Ref: DirectoryServiceId
          radius_proxy_port_number:
            Ref: RadiusPortNumber
          radius_shared_secret_arn:
            Ref: DuoConfigurationSettingsSecret
          radius_proxy_server_count:
            Ref: RadiusProxyServerCount
      Tags:
        - Key: duo:DirectoryServiceId
          Value:
            Ref: DirectoryServiceId
      Code:
        S3Bucket:
          Ref: LambdaZipsBucket
        S3Key:
          Fn::Sub: ${QSS3KeyPrefix}functions/packages/directory-service-mfa-configurator.zip
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: RadiusProxyBootstrapCompleteTopic
      FunctionName:
        Fn::GetAtt:
          - UpdateDirectoryServiceMfaSettings
          - Arn
  RadiusSharedSecretRotationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: RadiusSharedSecretRotationRole-${DirectoryServiceId}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RotateDuoConfigurationSettingsSecret
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:UpdateSecretVersionStage
                Resource:
                  Ref: DuoConfigurationSettingsSecret
              - Effect: Allow
                Action:
                  - secretsmanager:GetRandomPassword
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  Fn::Sub: arn:${AWS::Partition}:s3:::${RadiusProxyBootstrapSystemsManagerBucket}/*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  RotateRadiusSharedSecretFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: RotateRadiusSharedSecret-${DirectoryServiceId}
      Description: "Rotates RADIUS shared secret and updates running instances and directory\n"
      Handler: index.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - RadiusSharedSecretRotationRole
          - Arn
      Runtime: python3.9
      Timeout: 60
      Environment:
        Variables:
          RunDocumentName:
            Ref: InstallAndConfigureDuoProxyServiceDocument
          PasswordLength: 25
          ExcludeCharacters: '"=,'
          RunDocumentTagName: tag:duo:DirectoryServiceId
          RunDocumentTagValue:
            Ref: DirectoryServiceId
      Tags:
        - Key: duo:DirectoryServiceId
          Value:
            Ref: DirectoryServiceId
      Code:
        ZipFile:
          Fn::Sub: "import boto3\nimport os\nimport json\n\nsecretsmanager_client = boto3.client('secretsmanager')\nssm_client = boto3.client('ssm')\n\ndef lambda_handler(event, context):\n    arn = event['SecretId']\n\
            \    token = event['ClientRequestToken']\n    step = event['Step']\n\n    if step == \"createSecret\":\n        create_secret(secretsmanager_client, arn, token)\n\n    elif step == \"finishSecret\"\
            :\n        finish_secret(secretsmanager_client, arn, token)\n        run_command_against_instances()\n\n    else:\n        pass # no-op\n\n\ndef create_secret(secretsmanager_client, arn, token):\n\
            \    # Get the secret\n    secret = json.loads(secretsmanager_client.get_secret_value(SecretId=arn, VersionStage=\"AWSCURRENT\")['SecretString'])\n\n    # Generate a random password\n    secret['RadiusSharedSecret']\
            \ = generate_password()\n\n    # Put the secret\n    secretsmanager_client.put_secret_value(SecretId=arn, ClientRequestToken=token, SecretString=json.dumps(secret), VersionStages=['AWSPENDING'])\n\
            \    print(\"createSecret: Successfully put secret for ARN %s and version %s.\" % (arn, token))\n\n\ndef finish_secret(secretsmanager_client, arn, token):\n    # First describe the secret to\
            \ get the current version\n    metadata = secretsmanager_client.describe_secret(SecretId=arn)\n    current_version = None\n    for version in metadata[\"VersionIdsToStages\"]:\n        if \"\
            AWSCURRENT\" in metadata[\"VersionIdsToStages\"][version]:\n            if version == token:\n                print(\"finishSecret: Version %s already marked as AWSCURRENT for %s\" % (version,\
            \ arn))\n                return\n            current_version = version\n            break\n\n    # Finalize by staging the secret version current\n    secretsmanager_client.update_secret_version_stage(SecretId=arn,\
            \ VersionStage=\"AWSCURRENT\", MoveToVersionId=token, RemoveFromVersionId=current_version)\n    print(\"finishSecret: Successfully set AWSCURRENT stage to version %s for secret %s.\" % (version,\
            \ arn))\n\n\ndef generate_password():\n\n    # Set defaults.\n    complexity_requirements = {\n        \"ExcludeUppercase\":False,\n        \"RequireEachIncludedType\":False,\n        \"IncludeSpace\"\
            :False,\n        \"ExcludeCharacters\":\"\",\n        \"PasswordLength\":20,\n        \"ExcludePunctuation\":False,\n        \"ExcludeLowercase\":False,\n        \"ExcludeNumbers\":False,\n\
            \    }\n\n    # Get the environment variables if they exist.\n    for key, value in complexity_requirements.items():\n        if not os.environ.get(key) == None:\n            complexity_requirements[key]\
            \ = os.environ[key]\n\n    response = secretsmanager_client.get_random_password(\n        PasswordLength=int(complexity_requirements['PasswordLength']),\n        ExcludeCharacters=complexity_requirements['ExcludeCharacters'],\n\
            \        ExcludeNumbers=complexity_requirements['ExcludeNumbers'],\n        ExcludePunctuation=complexity_requirements['ExcludePunctuation'],\n        ExcludeUppercase=complexity_requirements['ExcludeUppercase'],\n\
            \        ExcludeLowercase=complexity_requirements['ExcludeLowercase'],\n        IncludeSpace=complexity_requirements['IncludeSpace'],\n        RequireEachIncludedType=complexity_requirements['RequireEachIncludedType']\n\
            \    )\n\n    return response['RandomPassword']\n\ndef run_command_against_instances():\n\n    response = ssm_client.send_command(\n        Targets=[{\n            'Key': os.environ['RunDocumentTagName'],\n\
            \            'Values': [os.environ['RunDocumentTagValue']]\n        }],\n        DocumentName=os.environ['RunDocumentName']\n    )\n\n\n    return response['Command']['CommandId']\n"
  LambdaZipsBucket:
    Type: AWS::S3::Bucket
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CopyZipsFunction
          - Arn
      DestBucket:
        Ref: LambdaZipsBucket
      SourceBucket:
        Fn::If:
          - UsingDefaultBucket
          - Fn::Sub: ${QSS3BucketName}-${AWS::Region}
          - Ref: QSS3BucketName
      Prefix:
        Ref: QSS3KeyPrefix
      Objects:
        - functions/packages/directory-service-mfa-configurator.zip
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  Fn::Sub:
                    - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
                    - S3Bucket:
                        Fn::If:
                          - UsingDefaultBucket
                          - Fn::Sub: ${QSS3BucketName}-${AWS::Region}
                          - Ref: QSS3BucketName
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*
  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.7
      Role:
        Fn::GetAtt:
          - CopyZipsRole
          - Arn
      Timeout: 240
      Code:
        ZipFile: "import json\nimport logging\nimport threading\nimport boto3\nimport cfnresponse\n\n\ndef copy_objects(source_bucket, dest_bucket, prefix, objects):\n    s3 = boto3.client('s3')\n    for\
          \ o in objects:\n        key = prefix + o\n        copy_source = {\n            'Bucket': source_bucket,\n            'Key': key\n        }\n        print('copy_source: %s' % copy_source)\n  \
          \      print('dest_bucket = %s'%dest_bucket)\n        print('key = %s' %key)\n        s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,\n              Key=key)\n\n\ndef delete_objects(bucket,\
          \ prefix, objects):\n    s3 = boto3.client('s3')\n    objects = {'Objects': [{'Key': prefix + o} for o in objects]}\n    s3.delete_objects(Bucket=bucket, Delete=objects)\n \n\ndef timeout(event,\
          \ context):\n    logging.error('Execution is about to time out, sending failure response to CloudFormation')\n    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)\n\n\ndef handler(event,\
          \ context):\n    # make sure we send a failure to CloudFormation if the function\n    # is going to timeout\n    timer = threading.Timer((context.get_remaining_time_in_millis()\n             \
          \ / 1000.00) - 0.5, timeout, args=[event, context])\n    timer.start()\n\n    print('Received event: %s' % json.dumps(event))\n    status = cfnresponse.SUCCESS\n    try:\n        source_bucket\
          \ = event['ResourceProperties']['SourceBucket']\n        dest_bucket = event['ResourceProperties']['DestBucket']\n        prefix = event['ResourceProperties']['Prefix']\n        objects = event['ResourceProperties']['Objects']\n\
          \        if event['RequestType'] == 'Delete':\n            delete_objects(dest_bucket, prefix, objects)\n        else:\n            copy_objects(source_bucket, dest_bucket, prefix, objects)\n\
          \    except Exception as e:\n        logging.error('Exception: %s' % e, exc_info=True)\n        status = cfnresponse.FAILED\n    finally:\n        timer.cancel()\n        cfnresponse.send(event,\
          \ context, status, {}, None)\n"
Outputs:
  RadiusProxyAutoScalingGroup:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-RadiusProxyAutoScalingGroup
    Value:
      Ref: RadiusProxyAutoScalingGroup
  RadiusProxyLaunchConfig:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-RadiusProxyLaunchConfig
    Value:
      Ref: RadiusProxyLaunchConfig
  DuoRadiusProxySecurityGroup:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DuoRadiusProxySecurityGroup
    Value:
      Ref: DuoRadiusProxySecurityGroup
  DirectoryServiceId:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DirectoryServiceId
    Value:
      Ref: DirectoryServiceId
  DuoRadiusProxyVpc:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DuoRadiusProxyVpc
    Value:
      Fn::GetAtt:
        - GetDirectoryServiceDetails
        - VpcId
  DuoConfigurationSettingsSecret:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DuoConfigurationSettingsSecret
    Value:
      Ref: DuoConfigurationSettingsSecret
  RadiusPortNumber:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-RadiusPortNumber
    Value:
      Ref: RadiusPortNumber
  DuoFailMode:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DuoFailMode
    Value:
      Ref: DuoFailMode
  RadiusProxyCloudWatchLogsGroup:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-RadiusProxyCloudWatchLogsGroup
    Value:
      Ref: RadiusProxyCloudWatchLogsGroup
  RadiusProxyBootstrapSystemsManagerBucket:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-RadiusProxyBootstrapSystemsManagerBucket
    Value:
      Ref: RadiusProxyBootstrapSystemsManagerBucket
  QSS3BucketRegion:
    Value:
      Ref: QSS3BucketRegion
